delimiters "<", ">"
import "io/protostuff/generator/core.stg"
import "io/protostuff/generator/java/generator.stg"
import "io/protostuff/generator/java/enum.stg"
import "io/protostuff/generator/java/builder.stg"

message_compiler_enabled(message) ::= <%
<if(message.nested)>
false
<else>
true
<endif>
%>

message_compiler_output(message) ::= "<message.proto.javaPackagePath>/<message.javaName>.java"
message_compiler_template(message) ::= "<message:message()>"

message(message) ::= <<
package <message.proto.javaPackage>;

<imports_generator_annotation()>

<message:message_body()>
>>

message_body(message) ::= <<
<message:generator_annotation()>
public <if(message.nested)>static <endif>final class <message.javaName> {
        
    <message.fields:field_declaration(); separator="\n">
    
    <message:builder_factory_method()>
    
    <message:builder_constructor()>
    
    <message.fields:field_accessors(); separator="\n">
    
    <message:builder()>
    
    <message.messages:message_body(); separator="\n">
    
    <message.enums:enum_body(); separator="\n">
}
>>

field_declaration(field) ::= <<
private <field.javaType> <field.javaName>;
>>

field_accessors(field) ::= <<
<field:field_getter()>
<field:field_presence_check()>
>>

field_getter(field) ::= <<
public <field.javaType> <field.javaGetterName>() {
    return <field.javaName>;
}
>>

field_presence_check(field) ::= <<
<if(field.javaGenerateHasMethod)>
public boolean <field.javaHasMethodName>() {
    return <field.javaName> != null;
}
<endif>
>>