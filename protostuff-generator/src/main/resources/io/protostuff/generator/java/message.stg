delimiters "<", ">"
import "io/protostuff/generator/core.stg"
import "io/protostuff/generator/java/generator.stg"
import "io/protostuff/generator/java/enum.stg"
import "io/protostuff/generator/java/schema.stg"
import "io/protostuff/generator/java/oneof.stg"
import "io/protostuff/generator/java/builder.stg"
import "io/protostuff/generator/java/message-base.stg"

message(message) ::= <<
package <message.proto.javaPackage>;

<message:message_body()>
>>

message_body(message) ::= <<
<if(!message.nested)><message:generator_annotation()><endif>
public <if(message.nested)>static <endif>final class <message.javaName>
        implements io.protostuff.Message\<<message.javaName>\>{

    private static final <message.javaName> DEFAULT_INSTANCE = newBuilder().build();

    <message.fields:field_declaration(); separator="\n">
    private boolean __merge_lock = false;
    <message.javaBitFieldNames:message_bit_field(); separator="\n">
    <message.oneofs:oneof_fields(); separator="\n">

    private <message.javaName>() {
        <message.fields:field_initializer(); separator="\n">
    }

    private <message.javaName>(Builder builder) {
        __merge_lock = true;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public static <message.javaName> getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    public static io.protostuff.Schema\<<message.javaName>\> getSchema()
    {
    	return Schema.INSTANCE;
    }

    <message.fields:field_accessors(); separator="\n">

    <message.oneofs:oneof_case(); separator="\n">

    @Override
    public io.protostuff.Schema\<<message.javaName>\> cachedSchema() {
        return Schema.INSTANCE;
    }

    <message:equals()>

    <message:hash_code()>

    <message:to_string()>

    <message:schema()>

    <message:builder()>

    <message.messages:message_body(); separator="\n">
    
    <message.enums:enum_body(); separator="\n">

    <message.oneofs:one_of(); separator="\n">
}
>>

field_equals_part(field) ::= <<
<if(!field.oneofPart)>
if (!java.util.Objects.equals(this.<field.javaName>, that.<field.javaName>)) {
    return false;
}
<endif>
>>

oneof_field_equals_part(oneof) ::= <<
if (!(java.util.Objects.equals(this.<oneof.javaCaseFieldName>, that.<oneof.javaCaseFieldName>)
        && java.util.Objects.equals(this.<oneof.javaFieldName>, that.<oneof.javaFieldName>))) {
    return false;
}
>>

field_hashCode_part(field) ::= <<
<if(!field.oneofPart)>
<if(!field.repeated && (field.javaIsNumericType || field.javaIsBooleanType))>
result = 31 * result + <field.type.javaWrapperType>.hashCode(this.<field.javaName>);
<else>
result = 31 * result + (this.<field.javaName> == null ? 0 : this.<field.javaName>.hashCode());
<endif>
<endif>
>>

oneof_field_hashCode_part(oneof) ::= <<
result = 31 * result + this.<oneof.javaCaseFieldName>.hashCode();
result = 31 * result + (this.<oneof.javaFieldName> == null ? 0 : this.<oneof.javaFieldName>.hashCode());
>>

message_bit_field(name) ::= <<
private int <name>;
>>

field_accessors(field) ::= <<
<if(field.oneofPart)>
public <field.javaType> <field.javaGetterName>() {
    if (<field.oneof.javaCaseFieldName> == <field.oneof.javaName>.<field.javaOneofConstantName>) {
        return (<field.javaType>) <field.oneof.javaFieldName>;
    }
    return <field.javaDefaultValue>;
}

public boolean <field.javaHasMethodName>() {
    return <field.oneof.javaCaseFieldName> == <field.oneof.javaName>.<field.javaOneofConstantName>;
}
<elseif(field.map)>
public <field.javaMapType> <field.javaMapGetterName>() {
    return <field.javaName>;
}

public int <field.javaRepeatedGetCountMethodName>() {
    return <field.javaName>.size();
}

public <field.javaMapValueType> <field.javaMapGetByKeyMethodName>(<field.javaMapKeyType> key) {
    return <field.javaName>.get(key);
}
<elseif(field.repeated)>
public <field.javaRepeatedType> <field.javaRepeatedGetterName>() {
    return <field.javaName>;
}

public int <field.javaRepeatedGetCountMethodName>() {
    return <field.javaName>.size();
}

public <field.javaType> <field.javaRepeatedGetByIndexMethodName>(int index) {
    return <field.javaName>.get(index);
}
<else>
public <field.javaType> <field.javaGetterName>() {
    return <field.javaName>;
}

public boolean <field.javaHasMethodName>() {
    return (<field.javaBitFieldName> & <field.javaBitFieldMask>) == <field.javaBitFieldMask>;
}
<endif>
>>

field_toString_part(field) ::= <<
<if(field.repeated)>
if (!<field.javaName>.isEmpty()) {
<else>
if (<field.javaHasMethodName>()) {
<endif>
    parts.add(<field.toStringPart>);
}
>>
