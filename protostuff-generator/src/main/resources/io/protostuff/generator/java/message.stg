delimiters "<", ">"
import "io/protostuff/generator/core.stg"
import "io/protostuff/generator/java/generator.stg"
import "io/protostuff/generator/java/enum.stg"
import "io/protostuff/generator/java/builder.stg"

message_compiler_enabled(message) ::= <%
<if(message.nested)>
false
<else>
true
<endif>
%>

message_compiler_output(message) ::= "<message.proto.javaPackagePath>/<message.javaName>.java"
message_compiler_template(message) ::= "<message:message()>"

message(message) ::= <<
package <message.proto.javaPackage>;

import java.util.Objects;
import java.util.List;
import java.util.ArrayList;
<imports_generator_annotation()>

<message:message_body()>
>>

message_body(message) ::= <<
<message:generator_annotation()>
public <if(message.nested)>static <endif>final class <message.javaName> {
    
    <message.fields:field_declaration(); separator="\n">
    
    <message:default_instance()>
    
    <message:builder_factory_method()>
    
    <message:builder_constructor()>
    
    <message.fields:field_accessors(); separator="\n">

    <message:message_equals()>

    <message:message_hashCode()>

    <message:message_toString()>

    <message:builder()>
    
    <message.messages:message_body(); separator="\n">
    
    <message.enums:enum_body(); separator="\n">
}
>>

field_declaration(field) ::= <<
<if(field.repeated)>
private final <field.javaRepeatedType> <field.javaName>;
<else>
private final <field.javaType> <field.javaName>;
<endif>
>>

field_accessors(field) ::= <<
<if(field.repeated)>
<field:repeated_field_getter()>
<field:repeated_field_get_count()>
<field:repeated_field_get_by_index()>
<else>
<field:field_getter()>
<if(field.javaIsMessage)>
<field:field_presence_check()>
<endif>
<endif>
>>

field_getter(field) ::= <<
public <field.javaType> <field.javaGetterName>() {
<if(field.javaIsMessage)>
    return <field.javaName> == null ? <field.javaDefaultValue> : <field.javaName>;
<else>
    return <field.javaName>;
<endif>
}
>>

field_presence_check(field) ::= <<
public boolean <field.javaHasMethodName>() {
    return <field.javaName> != null;
}
>>

repeated_field_getter(field) ::= <<
public <field.javaRepeatedType> <field.javaRepeatedGetterName>() {
    return <field.javaName>;
}
>>

repeated_field_get_count(field) ::= <<
public int <field.javaRepeatedGetCountMethodName>() {
    return <field.javaName>.size();
}
>>

repeated_field_get_by_index(field) ::= <<
public <field.javaType> <field.javaRepeatedGetByIndexMethodName>(int index) {
    return <field.javaName>.get(index);
}
>>

default_instance(message) ::= <<
private static final <message.javaName> DEFAULT_INSTANCE;

static {
    DEFAULT_INSTANCE = newBuilder().build();
}

public static <message.javaName> getDefaultInstance() {
    return DEFAULT_INSTANCE;
}
>>

message_equals(message) ::= <<
@Override
public boolean equals(Object obj) {
	if (this == obj) {
		return true;
	}
	if (obj == null || this.getClass() != obj.getClass()) {
		return false;
	}
	<message.name> that = (<message.name>) obj;
	<if(message.hasFields)>
	return
	    <message.fields:field_equals(); separator="\n&& ">;
	<else>
	return true;
	<endif>
}
>>

message_hashCode(message) ::= <<
@Override
public int hashCode() {
	<if(message.hasFields)>
	return Objects.hash(<message.fields:{field|<field.javaName>}; separator=", ">);
	<else>
	return 0;
	<endif>
}
>>

field_equals(field) ::= <<
Objects.equals(this.<field.javaName>, that.<field.javaName>)
>>

message_toString(message) ::= <<
@Override
public String toString() {
    List\<String> parts = new ArrayList\<>();
    <message.fields:field_toString_part(); separator="\n">
    return "<message.javaName>{" + String.join(", ", parts) + "}";
}
>>

field_toString_part(field) ::= <<
<if(field.repeated)>
if (!<field.javaName>.isEmpty()) {
<else>
if (!Objects.equals(<field.javaName>, <field.javaDefaultValue>)) {
<endif>
    parts.add(<field.toStringPart>);
}
>>