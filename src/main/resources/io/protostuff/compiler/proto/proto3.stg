import "io/protostuff/compiler/core.stg"
import "io/protostuff/compiler/proto/TextFormat.stg"

proto_compiler_enabled(proto) ::= "true"

proto_compiler_output(proto) ::= <<
<proto.name>
>>

proto_compiler_template(proto) ::= <<
<proto:syntax()>
<proto:package()>
<proto:imports()>
<proto:options()>
<proto:messages()>
<proto:enums()>
>>

syntax(proto) ::= <<
syntax = "<proto.syntax>";
>>

package(proto) ::= <<
package <proto.packageName>;
>>

imports(proto) ::= <<
<proto.imports:proto_import(); separator="\n">
>>

proto_import(name) ::= <<
import "<name>";
>>

options(container) ::= <<
<container.options.keys:
    {key | <option(key=key, value=container.options.(key))>}; separator="\n">
>>

option(key, value) ::= <<
<if(value.messageType)><\\>
option <key> = <value:text_format()>;<\\>
<else><\\>
option <key> = <value>;<\\>
<endif>
>>

messages(container) ::= <<
<container.messages:message(); separator="\n">
>>

message(message) ::= <<
message <message.name> {
    <message:message_fields()>
    <message:messages()>
    <message:enums()>
}
>>

message_fields(message) ::= <<
<message.fields:message_field(); separator="\n">
>>

message_field(field) ::= <<
<field.type> <field.name> = <field.tag>;
>>

enums(container) ::= <<
<container.enums:enum(); separator="\n">
>>

enum(enum) ::= <<
enum <enum.name> {
    <enum:enum_values()>
}
>>

enum_values(enum) ::= <<
<enum.values:enum_value(); separator="\n">
>>

enum_value(value) ::= <<
<value.name> = <value.value>;
>>
